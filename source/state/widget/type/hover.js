import { WIDGET_SHAPE_TYPE } from './shape'
import { HANDLE_TYPE } from './handle'

const HOVER_TARGET_PREFIX = 'hover-target'
const HOVER_TARGET_TYPE = {
  ANY_RECT: `${HOVER_TARGET_PREFIX} any-rect`,
  ANY_RECT_OUTLINE: `${HOVER_TARGET_PREFIX} any-rect-outline`,
  RECT_TOP: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.TOP}`,
  RECT_BOTTOM: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.BOTTOM}`,
  RECT_LEFT: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.LEFT}`,
  RECT_RIGHT: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.RIGHT}`,
  RECT_TOP_LEFT: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.TOP_LEFT}`,
  RECT_TOP_RIGHT: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.TOP_RIGHT}`,
  RECT_BOTTOM_LEFT: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.BOTTOM_LEFT}`,
  RECT_BOTTOM_RIGHT: `${HOVER_TARGET_PREFIX} ${HANDLE_TYPE.BOTTOM_RIGHT}`
}

const RECT_HOVER_TARGET_TYPE_LIST = [
  HOVER_TARGET_TYPE.RECT_LEFT,
  HOVER_TARGET_TYPE.RECT_RIGHT,
  HOVER_TARGET_TYPE.RECT_TOP,
  HOVER_TARGET_TYPE.RECT_BOTTOM,
  HOVER_TARGET_TYPE.RECT_TOP_LEFT,
  HOVER_TARGET_TYPE.RECT_TOP_RIGHT,
  HOVER_TARGET_TYPE.RECT_BOTTOM_LEFT,
  HOVER_TARGET_TYPE.RECT_BOTTOM_RIGHT
]

const HOVER_TARGET_TYPE_LIST_MAP = {
  [ WIDGET_SHAPE_TYPE.RECT ]: RECT_HOVER_TARGET_TYPE_LIST,
  [ WIDGET_SHAPE_TYPE.LINE ]: [],
  [ WIDGET_SHAPE_TYPE.ELBOW ]: [],
  [ WIDGET_SHAPE_TYPE.LINE_LINK ]: [],
  [ WIDGET_SHAPE_TYPE.RECT_CANVAS ]: [ HOVER_TARGET_TYPE.ANY_RECT, HOVER_TARGET_TYPE.ANY_RECT_OUTLINE, ...RECT_HOVER_TARGET_TYPE_LIST ],
  [ WIDGET_SHAPE_TYPE.RECT_TEXT ]: RECT_HOVER_TARGET_TYPE_LIST,
  [ WIDGET_SHAPE_TYPE.ELBOW_LINK ]: []
}

const HOVER_TARGET_TYPE_LIST = Array.from(new Set([
  ...HOVER_TARGET_TYPE_LIST_MAP[ WIDGET_SHAPE_TYPE.RECT ],
  ...HOVER_TARGET_TYPE_LIST_MAP[ WIDGET_SHAPE_TYPE.LINE ],
  ...HOVER_TARGET_TYPE_LIST_MAP[ WIDGET_SHAPE_TYPE.ELBOW ],
  ...HOVER_TARGET_TYPE_LIST_MAP[ WIDGET_SHAPE_TYPE.LINE_LINK ],
  ...HOVER_TARGET_TYPE_LIST_MAP[ WIDGET_SHAPE_TYPE.RECT_CANVAS ],
  ...HOVER_TARGET_TYPE_LIST_MAP[ WIDGET_SHAPE_TYPE.RECT_TEXT ],
  ...HOVER_TARGET_TYPE_LIST_MAP[ WIDGET_SHAPE_TYPE.ELBOW_LINK ]
]))

const isHoverTargetApplicable = (shapeType, hoverTargetType) => {
  const verifyList = HOVER_TARGET_TYPE_LIST_MAP[ shapeType ]
  return Boolean(verifyList && verifyList.includes(hoverTargetType))
}

const getHandleShapeMap = (enabledList) => Object.entries(HOVER_TARGET_TYPE_LIST_MAP).reduce((o, [ shapeType, hoverTargetTypeList ]) => {
  o[ shapeType ] = hoverTargetTypeList.filter((hoverTargetType) => enabledList.includes(hoverTargetType))
  return o
}, {})
const HOVER_ENABLED_HANDLE_SHAPE_MAP_MAP = {
  [ HANDLE_TYPE.TOP_FREE ]: getHandleShapeMap(RECT_HOVER_TARGET_TYPE_LIST),
  [ HANDLE_TYPE.BOTTOM_FREE ]: getHandleShapeMap(RECT_HOVER_TARGET_TYPE_LIST),
  [ HANDLE_TYPE.ANCHOR_HEAD ]: getHandleShapeMap(RECT_HOVER_TARGET_TYPE_LIST),
  [ HANDLE_TYPE.ANCHOR_TAIL ]: getHandleShapeMap(RECT_HOVER_TARGET_TYPE_LIST),
  [ HANDLE_TYPE.TOP_FREE_LINK ]: getHandleShapeMap([ HOVER_TARGET_TYPE.ANY_RECT, ...RECT_HOVER_TARGET_TYPE_LIST ]),
  [ HANDLE_TYPE.BOTTOM_FREE_LINK ]: getHandleShapeMap([ HOVER_TARGET_TYPE.ANY_RECT_OUTLINE, ...RECT_HOVER_TARGET_TYPE_LIST ]),
  [ HANDLE_TYPE.ANCHOR_HEAD_LINK ]: getHandleShapeMap([ HOVER_TARGET_TYPE.ANY_RECT, ...RECT_HOVER_TARGET_TYPE_LIST ]),
  [ HANDLE_TYPE.ANCHOR_TAIL_LINK ]: getHandleShapeMap([ HOVER_TARGET_TYPE.ANY_RECT_OUTLINE, ...RECT_HOVER_TARGET_TYPE_LIST ])
}
const HOVER_ENABLED_HANDLE_TYPE_SET = new Set(Object.keys(HOVER_ENABLED_HANDLE_SHAPE_MAP_MAP))

export {
  HOVER_TARGET_TYPE,
  HOVER_TARGET_TYPE_LIST,
  HOVER_TARGET_TYPE_LIST_MAP,
  isHoverTargetApplicable,

  HOVER_ENABLED_HANDLE_SHAPE_MAP_MAP,
  HOVER_ENABLED_HANDLE_TYPE_SET
}
